[{"path":"https://fazepher.github.io/tempeRing/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 tempeRing authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://fazepher.github.io/tempeRing/articles/Invariant_Kernels.html","id":"general-setting","dir":"Articles","previous_headings":"","what":"General setting","title":"Invariant Kernels","text":"general setting random vector \\((X,Y)\\) interest joint target measure \\(\\mu\\). , two marginal probability spaces \\[(\\Omega_X,\\mathcal{F}_X,\\mu_{\\scriptsize{X}})\\quad\\text{}\\quad (\\Omega_Y,\\mathcal{G}_Y,\\mu_{\\scriptsize{Y}}),\\] joint probability space \\[(\\Omega_X\\times\\Omega_Y,\\;\\mathcal{F}_X\\otimes\\mathcal{G}_Y,\\;\\mu).\\] corresponding conditional measures \\(\\mu_{X|Y}(\\cdot | \\cdot)\\) \\(\\mu_{Y|X}(\\cdot | \\cdot)\\). Let \\(\\) joint event. can define following \\(Y\\)-slice event: \\[A_Y := \\left\\lbrace \\tilde{y} \\;\\\\; \\Omega_Y \\;:\\; \\exists\\; \\tilde{x} \\;\\\\; \\Omega_X, \\text{ } (\\tilde{x},\\tilde{y}) \\;\\\\; \\right\\rbrace\\] correspoding \\(X\\)-slice function \\[A_X := \\Omega_Y \\mapsto \\mathcal{F}_X \\text{ } A_X(y) = \\left\\lbrace \\tilde{x} \\\\Omega_X \\;:\\; (\\tilde{x}, y) \\;\\\\; \\right\\rbrace\\]","code":""},{"path":"https://fazepher.github.io/tempeRing/articles/Invariant_Kernels.html","id":"basic-identity","dir":"Articles","previous_headings":"General setting","what":"Basic identity","title":"Invariant Kernels","text":"\\[\\mu() = \\int\\limits_{A_Y} \\mu_{X|Y}(A_X(y)|Y=y) d\\mu_Y\\]","code":""},{"path":"https://fazepher.github.io/tempeRing/articles/Invariant_Kernels.html","id":"invariance-property","dir":"Articles","previous_headings":"","what":"Invariance property","title":"Invariant Kernels","text":"Markov kernel \\(P\\) \\(\\mu\\)-invariant \\(\\mu() = \\int P(|z)d\\mu\\)","code":""},{"path":"https://fazepher.github.io/tempeRing/articles/Invariant_Kernels.html","id":"single-component-invariance","dir":"Articles","previous_headings":"Invariance property","what":"Single component invariance","title":"Invariant Kernels","text":"Let \\(P_{X|Y}[x,A_X(y)]\\) Markov kernel define corresponding single component update kernel \\(P[(x,y),] = \\delta_y(A_Y) P_{X|Y}[x,A_X(y)]\\). , \\[P_{X|Y}[x,A_X(y)] \\text{ } \\mu_{X|Y}\\text{-invariant} \\;\\Longrightarrow\\; P[(x,y),] \\text{ } \\mu_\\text{-invariant}\\] Indeed, \\[\\begin{split} \\int P[(x,y),]d\\mu &= \\int\\limits_{\\Omega_Y}\\int\\limits_{\\Omega_X}P[(x,y),]d\\mu_{\\scriptsize{X|Y=y}}d\\mu_{\\scriptsize{Y}} \\\\ &= \\int\\limits_{\\Omega_Y}\\delta_y(A_Y)\\int\\limits_{\\Omega_X} P_{X|Y}[x,A_X(y)]d\\mu_{\\scriptsize{X|Y=y}}\\;d\\mu_{\\scriptsize{Y}}\\\\ &= \\int\\limits_{A_Y}\\;\\int\\limits_{\\Omega_X} P_{X|Y}[x,A_X(y)]d\\mu_{\\scriptsize{X|Y=y}}\\; d\\mu_{\\scriptsize{Y}}\\\\ &=\\int\\limits_{A_Y}\\mu_{\\scriptsize{X|Y}}(A_X(y)|Y=y)d\\mu_{\\scriptsize{Y}} = \\mu() \\end{split}\\]","code":""},{"path":"https://fazepher.github.io/tempeRing/articles/Invariant_Kernels.html","id":"composition-invariance","dir":"Articles","previous_headings":"Invariance property","what":"Composition invariance","title":"Invariant Kernels","text":"can compose invariant kernels mantain invariance. Let \\(P_1\\) \\(P_2\\) two \\(\\mu\\)-invariant kernels define: \\[P_1P_2(z,) = \\int\\limits_\\Omega P_2(\\tilde{z},)P_1(z,d\\tilde{z})\\] see invariance kept: \\[\\begin{split} \\int\\limits_\\Omega P_1P_2(z,)\\mu(dz) &= \\int\\limits_\\Omega\\int\\limits_\\Omega P_2(\\tilde{z},)P_1(z,d\\tilde{z})\\mu(dz) \\\\ &= \\int\\limits_\\Omega P_2(\\tilde{z},)\\int\\limits_\\Omega P_1(z,d\\tilde{z})\\mu(dz)\\\\ &= \\int\\limits_\\Omega P_2(\\tilde{z},)\\mu(d\\tilde{z}) = \\mu() \\end{split}\\] induction can extend result \\(\\lbrace P_k\\rbrace_{k=1}^K\\) \\(\\mu\\)-invariant kernels, compositions \\[\\overset{\\circ}{P}_k(z,) = \\begin{cases} \\int\\limits_\\Omega P_k(\\tilde{z},)\\overset{\\circ}{P}_{k-1}(z,d\\tilde{z}) & k=K,\\dots,2 \\\\[0.3em] P_1(z,) & k=1 \\end{cases}\\] also \\(\\mu\\)-invariant.","code":""},{"path":"https://fazepher.github.io/tempeRing/articles/Measure_Theory.html","id":"sigma-algebra","dir":"Articles","previous_headings":"","what":"\\(\\sigma\\)-Algebra","title":"Basic Measure Theory Preliminaries","text":"class subsets \\(\\Omega\\), \\(\\mathcal{F} \\subseteq \\mathcal{P}(\\Omega)\\) called \\(\\sigma\\)-algebra following three conditions hold: contains space:\\[\\Omega\\;\\\\;\\mathcal{F},\\] closed complements: \\[\\;\\\\;\\mathcal{F} \\quad\\Longrightarrow\\quad ^c\\;\\\\;\\mathcal{F},\\] closed countable unions: \\[\\lbrace A_i \\rbrace_{=1}^\\infty\\,\\\\,\\mathcal{F} \\text{ } \\forall\\; j\\neq k, A_j\\bigcap A_k = \\emptyset  \\;\\Longrightarrow\\; \\bigcup\\limits_{=1}^\\infty A_i\\,\\\\,\\mathcal{F}.\\]","code":""},{"path":"https://fazepher.github.io/tempeRing/articles/Measure_Theory.html","id":"measurable-space","dir":"Articles","previous_headings":"","what":"Measurable Space","title":"Basic Measure Theory Preliminaries","text":"pair \\((\\Omega,\\mathcal{F})\\) called measurable space elements \\(\\mathcal{F}\\) said \\(\\mathcal{F}\\)-measurable sets, simply measurable sets context clear.","code":""},{"path":"https://fazepher.github.io/tempeRing/articles/Measure_Theory.html","id":"borel-sigma-algebra","dir":"Articles","previous_headings":"","what":"Borel \\(\\sigma\\)-algebra","title":"Basic Measure Theory Preliminaries","text":"Let \\(\\Omega = \\mathbb{R}\\) consider open intervals \\((,b)\\) \\(-\\infty< < b<\\infty\\). smallest \\(\\sigma\\)-algebra containing called Borel \\(\\sigma\\)-algebra \\(\\mathbb{R}\\) denoted \\(\\mathcal{B}(\\mathbb{R})\\). Analogously, \\(\\Omega \\subset \\mathbb{R}\\), \\(\\mathcal{B}(\\Omega)\\) Borel \\(\\sigma\\)-algebra; , smallest \\(\\sigma\\)-algebra containing open intervals \\(\\Omega\\). example, \\(\\mathcal{B}([0,1])\\) smallest \\(\\sigma\\)-algebra containing open intervals \\((,b)\\) \\(0<<b<1\\). Whenever context clear, one can refer simply Borel \\(\\sigma\\)-algebra lighten notation \\(\\mathcal{B}\\).","code":""},{"path":"https://fazepher.github.io/tempeRing/articles/Measure_Theory.html","id":"measurable-functions","dir":"Articles","previous_headings":"","what":"Measurable Functions","title":"Basic Measure Theory Preliminaries","text":"Let \\((\\Omega_X,\\mathcal{F})\\) \\((\\Omega_Y, \\mathcal{G})\\) two measurable spaces. function \\[f:\\Omega_X\\mapsto\\Omega_Y\\] said \\(\\mathcal{F}\\)-measurable, precisely \\((\\mathcal{F},\\mathcal{G})\\)-measurable, pre-image \\(f\\) \\(\\mathcal{G}\\)-measurable set \\(\\mathcal{F}\\)-measurable. , \\[\\,\\\\,\\mathcal{G} \\;\\Longrightarrow\\; f^{-1}() := \\left\\lbrace x \\\\Omega_X \\;:\\; f(x) \\\\right\\rbrace \\,\\\\, \\mathcal{F}\\]","code":""},{"path":"https://fazepher.github.io/tempeRing/articles/Measure_Theory.html","id":"measure","dir":"Articles","previous_headings":"","what":"Measure","title":"Basic Measure Theory Preliminaries","text":"Let \\((\\Omega,\\mathcal{F})\\) measurable space. function \\[\\mu:\\mathcal{F}\\mapsto [0,\\infty]\\] called measure satisfies following two conditions: empty set measure zero: \\(\\mu(\\emptyset) = 0\\), \\(\\sigma\\)-additive: \\[\\lbrace A_i \\rbrace_{=1}^\\infty\\,\\\\,\\mathcal{F},\\, \\forall\\, j\\neq k, A_j\\bigcap A_i = \\emptyset  \\;\\Longrightarrow\\; \\mu\\left(\\bigcup\\limits_{=1}^\\infty A_i\\right) = \\sum\\limits_{=1}^\\infty \\mu(A_i).\\] Note range measure implicitly sets requirement non-negative, may assigned special “infinite” value, abuse notation \\([0,\\infty]=\\mathbb{R}_{\\geq 0}\\;\\bigcup\\) ``\\(+\\infty\\)’’ means. triplet \\((\\Omega,\\mathcal{F},\\mu)\\) measure space.","code":""},{"path":"https://fazepher.github.io/tempeRing/articles/Measure_Theory.html","id":"probability-and-other-types-of-measures","dir":"Articles","previous_headings":"","what":"Probability and other types of Measures","title":"Basic Measure Theory Preliminaries","text":"Whenever certain conditions met, measure can qualified; notably, example, whenever space “total measure 1”, may called probability measure: Probability measure: \\[\\mu(\\Omega) = 1\\] Finite measure: \\[\\mu(\\Omega)<\\infty\\] \\(\\sigma\\)-finite measure: \\[\\exists \\;\\lbrace A_i\\rbrace_{=1}^{\\infty}\\;\\\\;\\mathcal{F} \\text{ } \\bigcup\\limits_{=1}^\\infty A_i = \\Omega,\\text{ } \\mu(A_i) < \\infty \\;\\forall\\; .\\] Complete measure: \\[N\\;\\\\;\\mathcal{F} \\text{ } \\mu(N) = 0 \\text{ } B\\subset N \\quad\\Longrightarrow\\quad B\\;\\\\;\\mathcal{F}\\]","code":""},{"path":"https://fazepher.github.io/tempeRing/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Fernando . Zepeda Herrera. Author, maintainer.","code":""},{"path":"https://fazepher.github.io/tempeRing/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Zepeda Herrera FA (2022). tempeRing: Tempering MCMC Methods. https://github.com/fazepher/tempeRing, https://fazepher.github.io/tempeRing/.","code":"@Manual{,   title = {tempeRing: Tempering MCMC Methods},   author = {Fernando A. {Zepeda Herrera}},   year = {2022},   note = {https://github.com/fazepher/tempeRing, https://fazepher.github.io/tempeRing/}, }"},{"path":"https://fazepher.github.io/tempeRing/index.html","id":"tempering","dir":"","previous_headings":"","what":"Tempering MCMC Methods","title":"Tempering MCMC Methods","text":"PACKAGE ACTIVE DEVELOPMENT, READY PRODUCTION goal tempeRing provide R package Summer Tempering project Warwick Statistics CDT. package allows user run several MCMC methods, focus Parallel Tempering Annealing multimodal targets. Available methods include: Random Walk Metropolis Simulated Tempering (ST) Parallel Tempering/Replica Exchange methods several dynamics: Standard naive implementation Reversible dynamics via Stochastic Even-Odd swaps (SEO) à la Syed et. al (2021) doi: 10.1111/rssb.12464 Non-reversible dynamics via Deterministic Even-Odd swaps (DEO) à la Okabe et al. (2001) doi: 10.1016/S0009-2614(01)00055-0, see also Syed et. al (2021). Accelarated Tempering symmetric targets via QuanTA transformations à la Tawn Roberts (2019) doi: 10.1017/apr.2019.35 Weight-Preservation via Hessian Adjusted Targets (HAT) à la Tawn et al. (2020) doi: 10.1007/s11222-019-09863-3 Methods development: Annealed Leap-Point Sampler (ALPS) http://arxiv.org/abs/2112.12908 Future plans: Adaptive schemes Online optimal scaling Emphasis allowing us see methods action illustrative toy examples performance (e.g. everything coded R far) effort made making R code efficient possible. Faster implementations extensions Python Julia horizon.","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/lmix.html","id":null,"dir":"Reference","previous_headings":"","what":"General Finite Mixture log densities and samplers — lmix","title":"General Finite Mixture log densities and samplers — lmix","text":"Log-density, density, random generation mixture user specified common parametric log-density (distribution sampling), according mixture weights w.","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/lmix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General Finite Mixture log densities and samplers — lmix","text":"","code":"lmix(x, w, ldens, ..., shared_args = NULL)  dmix(x, w, ldens, ..., shared_args = NULL, log = FALSE)  rmix(n, w, rdist, comp_args_list, shared_args = NULL, simplify = FALSE)"},{"path":"https://fazepher.github.io/tempeRing/reference/lmix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General Finite Mixture log densities and samplers — lmix","text":"x quantile quantiles ldens allows vectorization. w vector non-negative mixture weights. valid mixture must sum 1. ldens function returns log-density desired common mixture distribution. ... arguments passed ldens vary mixture component (see Component Parameters). shared_args List arguments passed ldens shared mixture components (see Component Parameters). log dmix, whether return log-density (default). n Number observations. rdist rmix, sampler function desired parametric distribution, whose first argument must named n refer number samples asked . comp_args_list rmix, list whose k-th element contains list parameters specific k-th mixture component (see Component Parameters). simplify rmix whether attempt simplify list generated samples array (default).","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/lmix.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"General Finite Mixture log densities and samplers — lmix","text":"general, suppose parametric family distributions \\(f(x | \\theta)\\) density given parameter vector \\(\\theta\\). K component mixture distribution non-negative weights \\(w_1,...,w_K\\) thath \\(\\sum w_k = 1\\) density $$f(x|w,\\Theta) = \\sum w_k f(x|\\theta_k)$$ \\(\\theta_k\\) represent specific parameters k-th component takes. numerical reasons, recommended work log-scale desired distribution, corresponding mixture can generated log-densities \\(l(x|\\theta) = log( f(x | theta))\\), via de Log-Sum-Exp form (see matrixStats::logSumExp): $$l(x|w,\\Theta) = LSE[log(w_k) + l(x)|\\theta_k)] k = 1,... K$$","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/lmix.html","id":"component-parameters","dir":"Reference","previous_headings":"","what":"Component Parameters","title":"General Finite Mixture log densities and samplers — lmix","text":"mixture components specific values parameters \\(\\theta_k\\). parameters may remain fixed across components. example, suppose want work mixture normal distributions components standard deviation different means. , least, two ways evaluating log-density scenario; namely, repeat shared parameters treat varying ... provide via shared_args list: Component parameters fed ... passed mapply, need unambigously iterable across mixture components, thus recommended pass lists want avoid surprises. instance, now wanted evaluate density mixture multivariate normals,  can pass means covariances lists k elements . behavior generating random samples different, though. sample generated given component , general, need sweep parameters component. reason, case component parameters passed single linst element contains parameters component. multivariate normal mixture scenario :","code":"lmix(x = 0, w = c(0.5, 0.5), ldens = lnorm,      mean = c(-1, 1), sd = c(1, 1))  lmix(x = 0, w = c(0.5, 0.5), ldens = lnorm,      mean = c(-1,1), shared_args = list(sd = 1)) dmix(x=c(0,0), w = c(0.2, 0.8), ldens = lmvtnorm,      mu = list(c(-3, -3), c(1, 1)),      sigma = list(diag(0.5,2), diag(0.5,2)))  dmix(x=c(0,0), w = c(0.2, 0.8), ldens = lmvtnorm,      mu = list(c(-3,3), c(1,1)),      shared_args = list(sigma = diag(0.5,2))) rmix(n=3, w = c(0.2, 0.8), rdist = rmvtnorm,      comp_args_list = list(k1 = list(mu = c(-3, 3)),                            k2 = list(mu = c(1, 1))),      shared_args = list(sigma = diag(0.5,2)))  rmix(n=3, w = c(0.2, 0.8), rdist = rmvtnorm,      comp_args_list = list(k1 = list(mu = c(-3, 3)),                            k2 = list(mu = c(1, 1))),      shared_args = list(sigma = diag(0.5,2)),      simplify = TRUE)"},{"path":[]},{"path":"https://fazepher.github.io/tempeRing/reference/lmix_mvtnorm.html","id":null,"dir":"Reference","previous_headings":"","what":"Finite Mixture of Multivariate Normal distributions — lmix_mvtnorm","title":"Finite Mixture of Multivariate Normal distributions — lmix_mvtnorm","text":"Log-density, density, random sampling finite mixture multivariate normal distributions, well unnormalized log-density tempered mixture.","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/lmix_mvtnorm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finite Mixture of Multivariate Normal distributions — lmix_mvtnorm","text":"","code":"lmix_mvtnorm(x, w, ..., shared_args = NULL)  dmix_mvtnorm(x, w, ..., shared_args = NULL, log = FALSE)  rmix_mvtnorm(n, w, comp_args_list, shared_args = NULL)  ulmix_mvtnorm_temp(x, beta = 1, w, ..., shared_args = NULL)"},{"path":"https://fazepher.github.io/tempeRing/reference/lmix_mvtnorm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finite Mixture of Multivariate Normal distributions — lmix_mvtnorm","text":"x quantile vector matrix quantile vectors (rows). w vector non-negative mixture weights. valid mixture must sum 1. ... arguments passed lmvtnorm vary mixture component (see Component Parameters) shared_args List arguments passed lmvtnorm shared mixture components (see Component Parameters). log dmix_mvtnorm, whether return log-density (default). n Number observations. comp_args_list rmix_mvtnorm, list whose k-th element contains list parameters specific k-th mixture component (see Component Parameters). beta Inverse temperature parameter \\(\\beta > 0\\).","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/lmix_mvtnorm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finite Mixture of Multivariate Normal distributions — lmix_mvtnorm","text":"lmix_mvtnorm gives log-density, dmix_mvtnorm density rmix_mvtnorm generates random samples. Finally, ulmix_mvtnorm_temp gives unnormalized log-density tempered mixture.","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/lmix_mvtnorm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Finite Mixture of Multivariate Normal distributions — lmix_mvtnorm","text":"tempering ulmix_mvtnorm_temp done mixture; confused mixture tempered multivariate normals. latter scenario just regular mixture multivariate normals, corresponding lmix_mvtnorm, tempering multivariate normal just rescales (see lmvtnorm_temp).","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/lmix_mvtnorm.html","id":"component-parameters","dir":"Reference","previous_headings":"","what":"Component Parameters","title":"Finite Mixture of Multivariate Normal distributions — lmix_mvtnorm","text":"See documentation lmix lengthier exposition difference passing arguments via ... shared_args, documentation lmvtnorm explains specific parameters available multivariate normal components mixture. may typically lists mu sigma, passed ... argument. case scales component (common dimension parameter d), shared_args list useful.","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/lmix_norm.html","id":null,"dir":"Reference","previous_headings":"","what":"Finite Mixture of Normal distributions — lmix_norm","title":"Finite Mixture of Normal distributions — lmix_norm","text":"Log-density, density, random sampling finite mixture normal distributions, well unnormalized log-density tempered mixture.","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/lmix_norm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finite Mixture of Normal distributions — lmix_norm","text":"","code":"lmix_norm(x, w, mean, sd = NULL, shared_sd = 1)  dmix_norm(x, w, mean, sd = NULL, shared_sd = 1, log = FALSE)  rmix_norm(n, w, mean, sd = NULL, shared_sd = 1)  ulmix_norm_temp(x, beta = 1, w, mean, sd = NULL, shared_sd = 1)"},{"path":"https://fazepher.github.io/tempeRing/reference/lmix_norm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finite Mixture of Normal distributions — lmix_norm","text":"x Vector quantiles. w vector non-negative mixture weights. valid mixture must sum 1. mean Vector containing means components sd (Optional) Vector containing standard deviations components shared_sd Shared standard deviation components; different scales use sd. log dmix_norm, whether return log-density (default). n Number observations. beta Inverse temperature parameter \\(\\beta > 0\\).","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/lmix_norm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finite Mixture of Normal distributions — lmix_norm","text":"lmix_norm gives log-density, dmix_norm density rmix_norm generates random samples. Finally, ulmix_norm_temp gives unnormalized log-density tempered mixture.","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/lmix_norm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Finite Mixture of Normal distributions — lmix_norm","text":"tempering ulmix_norm_temp done mixture; confused mixture tempered normals. latter scenario just regular mixture normals, corresponding lmix_norm, tempering normal just rescales (see lnorm_temp).","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/lmvtnorm_temp.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate Tempered Normal log densities and sampler — lmvtnorm_temp","title":"Multivariate Tempered Normal log densities and sampler — lmvtnorm_temp","text":"Log-density, density random generation multivariate tempered normal inverse temperature equal beta, mean equal mu covariance matrix equal sigma. lmvtnorm, dmvtnorm rmvtnorm equivalent tempered versions beta=1.","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/lmvtnorm_temp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate Tempered Normal log densities and sampler — lmvtnorm_temp","text":"","code":"lmvtnorm_temp(   x,   beta = 1,   mu = 0,   sigma = NULL,   sigma_inv = NULL,   logdet_sigma = NULL,   d = NULL )  dmvtnorm_temp(   x,   beta = 1,   mu = 0,   sigma = NULL,   sigma_inv = NULL,   logdet_sigma = NULL,   d = NULL,   log = FALSE )  rmvtnorm_temp(   n,   beta = 1,   mu = rep(0, 2),   sigma = NULL,   LChol_sigma = NULL,   d = NULL )  lmvtnorm(x, mu = 0, sigma = NULL, sigma_inv = NULL, logdet_sigma = NULL)  dmvtnorm(   x,   mu = 0,   sigma = NULL,   sigma_inv = NULL,   logdet_sigma = NULL,   log = FALSE )  rmvtnorm(n, mu = 0, sigma = NULL, LChol_sigma = NULL)"},{"path":"https://fazepher.github.io/tempeRing/reference/lmvtnorm_temp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate Tempered Normal log densities and sampler — lmvtnorm_temp","text":"x quantile vector matrix quantile vectors (rows). beta Inverse temperature parameter \\(\\beta > 0\\). mu Mean vector. single value provided, expanded via rep(mu,d). sigma Covariance matrix, default taken identity. sigma_inv (Optional) Inverse covariance matrix, see Details. logdet_sigma (Optional) Logarithm determinant covariance matrix, see Details. d Dimension x, NULL (default) taken ncol(x) length(x) appropriate;  random generation, taken length(mu). log dmvtnorm_temp dmvtnorm, whether return log-density (default). n Number observations. LChol_sigma (Optional) Lower triangular component Cholesky decomposition sigma, see Details.","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/lmvtnorm_temp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate Tempered Normal log densities and sampler — lmvtnorm_temp","text":"preffix l stands log-density, d density, r sampling. lnorm gives log-density regular normal without tempering (.e. \\(\\beta = 1\\)). See stats::dnorm() information. sampling n> 1 realizations, resulting matrix n rows d columns.","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/lmvtnorm_temp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multivariate Tempered Normal log densities and sampler — lmvtnorm_temp","text":"Tempering distribution means raising density power \\(\\beta>0\\), known inverse temperature. Equivalently, multiply log-density \\(\\beta\\): $$f_\\beta(x) = f(x)^\\beta$$ $$l_\\beta(x) = \\beta l(x)$$ Consider \\(d\\)-dimensional multivariate normal random variable centered \\(\\mu\\) covariance matrix \\(\\Sigma\\), \\(cte\\) represents normalizing constant $$X ~ MVN(\\mu, \\Sigma)$$ $$l(x) = -0.5(x-\\mu)^T\\Sigma^-1(x-\\mu) + cte$$ tempered version equivalent rescaling new covariance matrix \\(\\Sigma/\\beta\\) keeping mean parameter: $$l_\\beta(x) = -\\beta 0.5 (x-\\mu)^T \\Sigma^-1 (x-\\mu)  + cte' $$ $$l_\\beta(x) = -0.5 (x-\\mu)^T (\\Sigma/\\beta)^-1 (x-\\mu) + cte'$$ $$X|\\beta ~ MVN(\\mu, \\Sigma/\\beta)$$ Now, multivariate normal density depends \\(\\Sigma\\) inverse \\(\\Sigma^-1\\) kernel term determinant normalizing constant $$cte = -0.5(d log(2\\pi) + log( det(\\Sigma) )$$ reason, instead providing covariance matrix sigma, user can provide via sigma_inv logdet_sigma, saving functions need compute hood. Another way thinking Multivariate Normal random variable consider Cholesky decomposition \\(\\Sigma = LL^T\\), whose lower triangular component \\(L\\) acts linear transformation \\(d\\) independent univariate standard normal variables vector $$X = \\mu + L [z_1, ..., z_d]^T$$ way rmvtnorm_temp rmvtnorm generate samples, via stats::rnorm. Thus, known, user may provide LChol_sigma instead sigma.","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/lmvtnorm_temp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multivariate Tempered Normal log densities and sampler — lmvtnorm_temp","text":"","code":"Sigma <- matrix(c(1,0.5,0.5,1),2) Sigma_inv <- solve(Sigma) LogDet_Sigma <- log(det(Sigma))  lmvtnorm_temp(x = c(0,0), beta = 0.5, sigma = Sigma) #> [1] -2.387183 lmvtnorm_temp(x = c(0,0), beta = 0.5,               sigma_inv = Sigma_inv, logdet_sigma = LogDet_Sigma) #> [1] -2.387183 lmvtnorm(x = c(0,0), sigma = Sigma/0.5) #> [1] -2.387183 dmvtnorm(x = c(0,0), sigma = Sigma/0.5) |> log() #> [1] -2.387183  L <- t(chol(Sigma)) rmvtnorm_temp(n = 1000, sigma = Sigma) |> plot()  rmvtnorm_temp(n = 1000, LChol_sigma = L) |> plot()   rmvtnorm_temp(n = 1, mu = rep(5,3)) #>          [,1]     [,2]     [,3] #> [1,] 5.531046 3.141856 5.373255 rmvtnorm_temp(n = 2, mu = rep(5,3)) #>          [,1]     [,2]     [,3] #> [1,] 5.617120 5.376406 5.032025 #> [2,] 6.340766 5.057586 3.008333 rmvtnorm_temp(n = 2, mu = 5, d = 3) #>          [,1]     [,2]     [,3] #> [1,] 5.458300 3.321567 4.902811 #> [2,] 5.975435 5.677804 5.536171"},{"path":"https://fazepher.github.io/tempeRing/reference/lnorm_temp.html","id":null,"dir":"Reference","previous_headings":"","what":"Tempered Normal log densities and sampler — lnorm_temp","title":"Tempered Normal log densities and sampler — lnorm_temp","text":"basic wrappers around stats::dnorm() stats::rnorm() provide shortcut evaluation log-density, density random generation univariate tempered normal inverse temperature equal beta, mean equal mean standard deviation equal sd. beta = 1, recover regular normal density.","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/lnorm_temp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tempered Normal log densities and sampler — lnorm_temp","text":"","code":"lnorm_temp(x, beta = 1, mean = 0, sd = 1)  dnorm_temp(x, beta = 1, mean = 0, sd = 1, log = FALSE)  rnorm_temp(n, beta = 1, mean = 0, sd = 1)  lnorm(x, mean = 0, sd = 1)"},{"path":"https://fazepher.github.io/tempeRing/reference/lnorm_temp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tempered Normal log densities and sampler — lnorm_temp","text":"x Vector quantiles. beta Inverse temperature parameter \\(\\beta > 0\\). mean Vector means. sd Vector standard deviations. log dnorm_temp, whether return log-density (default). n Number observations.","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/lnorm_temp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tempered Normal log densities and sampler — lnorm_temp","text":"preffix l stands log-density, d density, r sampling. lnorm gives log-density regular normal without tempering (.e. \\(\\beta = 1\\)). See stats::dnorm() information.","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/lnorm_temp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tempered Normal log densities and sampler — lnorm_temp","text":"Tempering distribution means raising density power \\(\\beta>0\\), known inverse temperature. Equivalently, multiply log-density \\(\\beta\\): $$f_\\beta(x) = f(x)^\\beta$$ $$l_\\beta(x) = \\beta l(x)$$ Consider univariate normal random variable centered \\(\\mu\\) standard deviation \\(\\sigma\\), \\(cte\\) represents normalizing constant $$X ~ N(\\mu, \\sigma)$$ $$l(x) = -(x-\\mu)^2 / 2\\sigma^2 + cte$$ tempered version equivalent rescaling new standard deviation \\(\\sigma/\\sqrt\\beta\\) keeping mean parameter: $$l_\\beta(x) = \\beta l(x) = -\\beta(x-\\mu)^2 / 2\\sigma^2 + cte'$$ $$X|\\beta ~ N(\\mu, \\sigma/\\sqrt\\beta)$$","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/lnorm_temp.html","id":"vectorization","dir":"Reference","previous_headings":"","what":"Vectorization","title":"Tempered Normal log densities and sampler — lnorm_temp","text":"functions inherit vectorization, can used example ggplot2::geom_function() show flattening effect tempering","code":"ggplot() +   geom_function(fun = dnorm,                 color = \"gray65\") +   geom_function(fun = dnorm_temp,                 args = list(beta = 0.75),                 color = \"steelblue4\") +   geom_function(fun = dnorm_temp,                 args = list(beta = 0.5),                 color = \"darkcyan\") +   geom_function(fun = dnorm_temp,                 args = list(beta = 0.25),                 color = \"blueviolet\") +   geom_function(fun = dnorm_temp,                 args = list(beta = 0.25^2),                 color = \"maroon4\") +   xlim(-6,6) +   theme_classic()"},{"path":[]},{"path":"https://fazepher.github.io/tempeRing/reference/lnorm_temp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tempered Normal log densities and sampler — lnorm_temp","text":"","code":"lnorm_temp(x = 0, beta = 0.5, sd = 1) #> [1] -1.265512 lnorm(0, sd = 1/sqrt(0.5)) #> [1] -1.265512  lnorm(x = 0) #> [1] -0.9189385 dnorm(x = 0, log = TRUE) #> [1] -0.9189385  dnorm_temp(x = 5, beta = 1) #> [1] 1.48672e-06 dnorm(x = 5) #> [1] 1.48672e-06  rnorm_temp(n = 1000, mean = 100, sd = 1) |> hist()  rnorm_temp(n = 1000, beta = 0.1, mean = 100, sd = 1) |> hist()"},{"path":"https://fazepher.github.io/tempeRing/reference/mh_step.html","id":null,"dir":"Reference","previous_headings":"","what":"Metropolis-Hastings Step — mh_step","title":"Metropolis-Hastings Step — mh_step","text":"Perform Metropolis-Hastings step one states. already proposed states log-density factors can call mh_step(). wish first sample proposal give step, can use mh_sampling_step(). metropolis_step() metropolis_sampling_step() just wrappers symmetric transition kernels.","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/mh_step.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metropolis-Hastings Step — mh_step","text":"","code":"mh_step(   x_curr,   x_prop,   l_curr,   l_prop,   lq_c2p = 0,   lq_p2c = 0,   do_checks = TRUE )  metropolis_step(x_curr, x_prop, l_curr, l_prop, do_checks = TRUE)  mh_sampling_step(   x_curr,   l_curr,   l_target,   ...,   sampler,   sampler_args = NULL,   lq_sampler = NULL,   lq_sampler_args = NULL,   do_checks = TRUE )  metropolis_sampling_step(   x_curr,   l_curr,   l_target,   ...,   sampler,   sampler_args,   do_checks = TRUE )"},{"path":"https://fazepher.github.io/tempeRing/reference/mh_step.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Metropolis-Hastings Step — mh_step","text":"x_curr, x_prop Two vectors matrices current proposed states. See Dimension specify correctly identify dimension state space. l_curr, l_prop Vectors values log-densities, possibly proportionality, current proposed states. lq_c2p, lq_p2c (Optional) Vectors transition log-densities, possibly proportionality. suffix _c2p corresponds transitions current towards proposed state(s), suffix _p2c contains reversed transitions. values ommited (default), Hastings ratio becomes standard Metropolis. do_checks TRUE (default), runs preliminary checks arguments validity. may set FALSE one sure arguments correct want incurr slight overhead. l_target mh_sampling_step(), function computes log-density target, possibly proportionality. must accept x_curr first argument returned value must valid corresponding l_prop. ... Arguments passed l_target function. sampler mh_sampling_step(), sampling function whose first argument compatible x_curr returns appropriate x_prop states. sampler_args list arguments passed sampler lq_sampler (Optional) mh_sampling_step(), function computes transition log-densities sampler(). first two arguments must conformable x_curr x_prop used compute relevant lq_c2p lq_p2c factors MH step. ommited, assumed symmetric , hence, needed. lq_sampler_args list arguments passed lq_sampler.","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/mh_step.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Metropolis-Hastings Step — mh_step","text":"list containing results Metropolis-Hastings step: x_next: next values chain. object structure input x_curr. proposal, contains corresponding x_prop x_curr values depending acceptance rejection. l_next: vector log-density values corresponding x_next elements. may re-used next iteration chain avoid wasting resources usually expensive computation. accepted: vector specifying whether proposals accepted rejected. May useful acceptance rate monitoring.","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/mh_step.html","id":"dimension","dir":"Reference","previous_headings":"","what":"Dimension","title":"Metropolis-Hastings Step — mh_step","text":"want perform MH steps C states, log-density inputs vectors length C. exception transition log-densities default set 0 signal dealing symmetrical Metropolis steps. Similarly, accepted l_next elements output list always vectors length C. States, hand, live space dimension d. thus 3 big combinations: C=1: want perform step single d-dimensional state. Without loss generality, x_curr x_prop two vectors length d. C>1, d>1: want perform step several multidimensional states. , x_curr x_prop two C d matrices, state row vector. C>1, d=1: want perform step several 1-dimensional states. , inputs can vectors length C , alternatively, x_curr x_prop may two C 1 matrices. output element x_next always structure input x_curr.","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/mh_step.html","id":"the-metropolis-hastings-ratio","dir":"Reference","previous_headings":"","what":"The Metropolis-Hastings Ratio","title":"Metropolis-Hastings Step — mh_step","text":"usual form MH acceptance probability \\(\\alpha = min{1, MH ratio}\\), relies ratio $$ MH ratio = \\pi(x_1) q(x_0|x_1) / \\pi(x_0) q(x_1|x_0) $$ satisfy detail balance. numerical reasons, wish work log scale ratio becomes $$ MH log-ratio =  l(x_1) + lq(x_0|x_1) - l(x_0) - lq(x_1|x_0) $$ Whenever transition kernel symmetrical (.e. \\(q(x_0|x_1)=q(x_1|x_0)\\)) can omit terms calculation recover original Metropolis et. al ratio. default assumption mh_step() function.","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/mh_step.html","id":"note-on-proportionality","dir":"Reference","previous_headings":"","what":"Note on proportionality","title":"Metropolis-Hastings Step — mh_step","text":"want also take advantage cancellation normalizing constants need log-densities constant proportionality. Note however refers constant. usually problems comes target density, care must taken general transition kernels may different underlying densities whose normalizing constants cancel.","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/tempeRing-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tempeRing: Tempering MCMC Methods — tempeRing-package","title":"tempeRing: Tempering MCMC Methods — tempeRing-package","text":"goal tempeRing provide R package Summer Tempering project Warwick Statistics CDT. package allows user run several MCMC methods, focus Parallel Tempering Annealing multimodal targets. Available methods include non-reversible reversible swap dynamics Parallel Tempering/Replica Exchange Annealed Leap-Point Sampling (ALPS), well Simulated Tempering Random Walk Metropolis.","code":""},{"path":[]},{"path":"https://fazepher.github.io/tempeRing/reference/tempeRing-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tempeRing: Tempering MCMC Methods — tempeRing-package","text":"Maintainer: Fernando . Zepeda Herrera Fernando.Zepeda@warwick.ac.uk (ORCID)","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/ulmix_temp.html","id":null,"dir":"Reference","previous_headings":"","what":"Tempered Mixture log densities generator — ulmix_temp","title":"Tempered Mixture log densities generator — ulmix_temp","text":"Unnormalized normalized log-tempered densities mixture user defined log-density. mixing densities still yields normalized density, tempering requires renormalization. Hence, direct result tempering unnormalized ulmix_temp. normalized version lmix_temp provided mainly univariate log-densities, internal numerical integration used via stats::integrate.","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/ulmix_temp.html","id":"component-parameters","dir":"Reference","previous_headings":"","what":"Component Parameters","title":"Tempered Mixture log densities generator — ulmix_temp","text":"behavior lmix: ... expects iterable arguments swept across components shared_args list shared arguments across components. detailed explanation please see documentation examples lmix.","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/ulmix_temp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tempered Mixture log densities generator — ulmix_temp","text":"","code":"ulmix_temp(x, beta = 1, w, ldens, ..., shared_args = NULL)  lmix_temp(x, beta = 1, w, ldens, ..., shared_args = NULL, log_z = NULL)"},{"path":"https://fazepher.github.io/tempeRing/reference/ulmix_temp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tempered Mixture log densities generator — ulmix_temp","text":"x quantile quantiles ldens allows vectorization. beta Inverse temperature parameter β > 0. w vector non-negative mixture weights. valid mixture must sum 1. ldens function returns log-density desired common mixture distribution. lmix_temp see Details restrictions multivariate densities. ... arguments passed ldens vary mixture component (see Component Parameters). shared_args List arguments passed ldens shared mixture components (see Component Parameters). log_z lmix_temp, normalizing constant. NULL (default) estimated via stats::integrate. Hence, optional univariate mixtures, necessary proper behavior multivariate mixtures (see Details).","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/ulmix_temp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tempered Mixture log densities generator — ulmix_temp","text":"ulmix_temp returns unnormalized log-density mixture, lmix_temp estimates normalized value.","code":""},{"path":"https://fazepher.github.io/tempeRing/reference/ulmix_temp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tempered Mixture log densities generator — ulmix_temp","text":"using lmix_temp general multivariate mixtures, user provide normalizing constant log_z (log scale). parameter can also useful efficiency one-dimensional situations, one avoid estimating every call. Note, however, many tasks context package necessarily require normalized version; function provided completeness tool situations normalized versions indeed sought.","code":""},{"path":[]}]
