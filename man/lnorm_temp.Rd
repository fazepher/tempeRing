% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Distributions.R
\name{lnorm_temp}
\alias{lnorm_temp}
\alias{dnorm_temp}
\alias{rnorm_temp}
\alias{lnorm}
\title{Tempered Normal log densities and sampler}
\usage{
lnorm_temp(x, beta = 1, mean = 0, sd = 1)

dnorm_temp(x, beta = 1, mean = 0, sd = 1)

rnorm_temp(n, beta = 1, mean = 0, sd = 1)

lnorm(x, mean = 0, sd = 1)
}
\arguments{
\item{x}{vector of quantiles.}

\item{beta}{inverse temperature parameter \eqn{\beta > 0}.}

\item{mean}{vector of means.}

\item{sd}{vector of standard deviations.}

\item{n}{number of observations.}
}
\value{
The preffix \code{l} stands for log-density, \code{d} for density, and \code{r} for sampling.
\code{lnorm} gives the log-density of a regular normal without tempering (i.e. \eqn{\beta = 1}).
See \code{\link[stats:Normal]{stats::dnorm()}} for more information.
}
\description{
These are basic wrappers around \code{stats::dnorm()} and \code{stats::rnorm()} to provide shortcut evaluation
of the log-density, density and random generation of a univariate tempered normal
with inverse temperature equal to \code{beta}, mean equal to \code{mean} and \strong{standard deviation} equal to \code{sd}.

When \code{beta} = 1, we recover a regular normal density.
}
\details{
Tempering a distribution means raising its density to a power \eqn{\beta>0},
known as inverse temperature. Equivalently, we multiply the log-density by \eqn{\beta}:
\deqn{f_\beta(x) = f(x)^\beta}
\deqn{l_\beta(x) = \beta l(x)}
Consider a univariate normal random variable centered at \eqn{\mu} with
standard deviation \eqn{\sigma}, where \eqn{cte} represents the normalizing constant
\deqn{X ~ N(\mu, \sigma)}
\deqn{l(x) = -(x-\mu)^2 / 2\sigma^2 + cte}
Its tempered version is equivalent to rescaling with new standard deviation \eqn{\sigma/\sqrt\beta}
and keeping the same mean parameter:
\deqn{l_\beta(x) = \beta l(x) = -\beta(x-\mu)^2 / 2\sigma^2 + cte'}
\deqn{X|\beta ~ N(\mu, \sigma/\sqrt\beta)}
}
\examples{

lnorm_temp(x = 0, beta = 0.5, sd = 1)
lnorm(0, sd = 1/sqrt(0.5))

lnorm(x = 0)
dnorm(x = 0, log = TRUE)

dnorm_temp(x = 5, beta = 1)
dnorm(x = 5)

rnorm_temp(n = 1000, mean = 100, sd = 1) |> hist()
rnorm_temp(n = 1000, beta = 0.1, mean = 100, sd = 1) |> hist()

# The functions inherit vectorization,
# so can be used for example with ggplot2::geom_function()
# to show the flattening effect of tempering

if(requireNamespace("ggplot2", quietly = TRUE)){
ggplot() +
  geom_function(fun = dnorm,
                color = "gray65") +
  geom_function(fun = dnorm_temp,
                args = list(beta = 0.75),
                color = "steelblue4") +
  geom_function(fun = dnorm_temp,
                args = list(beta = 0.5),
                color = "darkcyan") +
  geom_function(fun = dnorm_temp,
                args = list(beta = 0.25),
                color = "blueviolet") +
  geom_function(fun = dnorm_temp,
                args = list(beta = 0.25^2),
                color = "maroon4") +
  xlim(-6,6) +
  theme_classic()
}


}
\seealso{
\code{\link[=lmvtnorm_temp]{lmvtnorm_temp()}}, \code{\link[stats:Normal]{stats::dnorm()}}
}
