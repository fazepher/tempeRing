% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/distributions.R
\name{lnorm}
\alias{lnorm}
\alias{dnorm_temp}
\alias{lnorm_temp}
\alias{rnorm_temp}
\title{Tempered Normal log densities and sampler}
\usage{
lnorm(x, mean = 0, sd = 1)

dnorm_temp(x, beta = 1, mean = 0, sd = 1)

lnorm_temp(x, beta = 1, mean = 0, sd = 1)

rnorm_temp(n, beta = 1, mean = 0, sd = 1)
}
\arguments{
\item{x}{vector of quantiles.}

\item{mean}{vector of means.}

\item{sd}{vector of standard deviations.}

\item{beta}{inverse temperature parameter \eqn{\beta > 0}.}

\item{n}{number of observations.}
}
\value{
\code{lnorm} gives the log-density of a normal without tempering (i.e. \eqn{\beta = 1}).
On the other hand, the functions with suffix \verb{_temp} do include the inverse temperature parameter,
\code{beta}. The preffix \code{l} stands for log-density, \code{d} for density, and \code{r} for sampling.
}
\description{
These are basic wrappers around \code{stats::dnorm()} and \code{stats::rnorm()} to provide shortcut evaluation
of the log-density of a univariate tempered normal as well as samples from it.
}
\details{
Tempering a distribution means raising its density to a power \eqn{\beta>0},
known as inverse temperature. A tempered normal centered at \eqn{\mu} with inverse temperature
parameter \eqn{\beta} and standard deviation \eqn{\sigma} is equivalent to a normal
with standard deviation \eqn{\sigma/\sqrt{\beta}} and the same mean parameter.
This rescaling property can be seen by noticing that raising to a power means multiplying within
the exponential term of the normal density and then renormalizing to integrate to 1.
}
\examples{

lnorm(x = 0)
dnorm(x = 0, log = TRUE)

dnorm_temp(x = 5, beta = 1)
dnorm(x = 5)

lnorm_temp(x = 0, beta = 0.5, sd = 1)
lnorm(0, sd = 1/sqrt(0.5))

rnorm_temp(n = 1000, mean = 100, sd = 1) |> hist()
rnorm_temp(n = 1000, beta = 0.1, mean = 100, sd = 1) |> hist()

# The functions inherit vectorization,
# so can be used for example with ggplot2::stat_function()
# to show the flattening effect of tempering

ggplot() +
  stat_function(fun = dnorm, color = "gray65") +
  stat_function(fun = dnorm_temp, args = list(beta = 0.75), color = "steelblue4") +
  stat_function(fun = dnorm_temp, args = list(beta = 0.5), color = "darkcyan") +
  stat_function(fun = dnorm_temp, args = list(beta = 0.25), color = "blueviolet") +
  stat_function(fun = dnorm_temp, args = list(beta = 0.25^2), color = "maroon4") +
  xlim(-6,6) +
  theme_classic()



}
